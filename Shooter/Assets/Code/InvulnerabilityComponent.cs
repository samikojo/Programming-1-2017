using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace TAMKShooter
{

    public class InvulnerabilityComponent : MonoBehaviour
    {
        private Renderer _renderer;
        [SerializeField] private float invulnerabilityLenght;
        [SerializeField] private AnimationCurve _flickeringEasing;
        [SerializeField] private float _startFlickeringFrequency;
        [SerializeField] private float _endFlickeringFrequency;

        // Use this for initialization
        public void Initialize()
        {
            _renderer = GetComponent<Renderer>();
            if (_renderer == null)
            {
                Destroy(this);
                new UnityException("Renderer not found on gameObject with InvulnerabilityComponent");
                return;
            }

            var health = GetComponent<Health>();
            if (health == null)
            {
                Destroy(this);
                new UnityException("Health not found on gameObject with InvulnerabilityComponent");
                return;
            }

            health.HealthChanged += OnDamageTaken;
        }

        public void Activate(Health health)
        {
            StartCoroutine(InvulnerabilityFlickering(health));
        }

        private void OnDamageTaken(object health, HealthChangedEventArgs args)
        {
            if (args.CurrentHealth > 0)
            {
                Activate((Health) health);
            }
        }

        private IEnumerator InvulnerabilityFlickering(Health health)
        {
            Debug.Log("Coroutine started");
            var t = 0f;
            
            health.CanTakeDamage = false;
            var startWaveLenght = 1f / _startFlickeringFrequency;
            var endWaveLenght = 1f / _endFlickeringFrequency;
            var nextFlipT = startWaveLenght / 2;

            while (t < 1)
            {
                t += Time.deltaTime / invulnerabilityLenght;
                if (t >= nextFlipT)
                {
                    nextFlipT += Mathf.Lerp(startWaveLenght, endWaveLenght, _flickeringEasing.Evaluate(t));
                    _renderer.enabled = !_renderer.enabled; 
                }

                yield return null;
            }

            _renderer.enabled = true;
            health.CanTakeDamage = true;
            yield return null;
        }
    }
}
